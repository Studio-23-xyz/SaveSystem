{
  "api/Global.ItemData.html": {
    "href": "api/Global.ItemData.html",
    "title": "Class ItemData | |",
    "keywords": "Class ItemData Namespace Global [Serializable] public class ItemData Inheritance object ItemData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields itemName public string itemName Field Value string itemQuantity public int itemQuantity Field Value int"
  },
  "api/Global.ItemDataBehaviour.html": {
    "href": "api/Global.ItemDataBehaviour.html",
    "title": "Class ItemDataBehaviour | |",
    "keywords": "Class ItemDataBehaviour Namespace Global public class ItemDataBehaviour : MonoBehaviour, ISaveable Inheritance object ItemDataBehaviour Implements ISaveable Fields itemData public ItemData itemData Field Value ItemData Properties IsDirty Save System Would Only save files that are Dirty in short has changes to submit public bool IsDirty { get; set; } Property Value bool Methods AssignSerializedData(string) Implement how your component will adjust on data load public void AssignSerializedData(string data) Parameters data string String data GetSerializedData() Return a serialized string for the save system to save public string GetSerializedData() Returns string String Data GetUniqueID() Must Return an Unique ID for save system to save file with this name public string GetUniqueID() Returns string"
  },
  "api/Global.PlayerData.html": {
    "href": "api/Global.PlayerData.html",
    "title": "Class PlayerData | |",
    "keywords": "Class PlayerData Namespace Global [Serializable] public class PlayerData Inheritance object PlayerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields playerLevel public int playerLevel Field Value int playerName public string playerName Field Value string"
  },
  "api/Global.PlayerDataBehaviour.html": {
    "href": "api/Global.PlayerDataBehaviour.html",
    "title": "Class PlayerDataBehaviour | |",
    "keywords": "Class PlayerDataBehaviour Namespace Global public class PlayerDataBehaviour : MonoBehaviour, ISaveable Inheritance object PlayerDataBehaviour Implements ISaveable Fields _uniqueID public string _uniqueID Field Value string playerData public PlayerData playerData Field Value PlayerData Properties IsDirty Save System Would Only save files that are Dirty in short has changes to submit public bool IsDirty { get; set; } Property Value bool Methods AssignSerializedData(string) Implement how your component will adjust on data load public void AssignSerializedData(string data) Parameters data string String data GetSerializedData() Return a serialized string for the save system to save public string GetSerializedData() Returns string String Data GetUniqueID() Must Return an Unique ID for save system to save file with this name public string GetUniqueID() Returns string"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Classes ItemData ItemDataBehaviour PlayerData PlayerDataBehaviour"
  },
  "api/Studio23.SS2.SaveSystem.Core.FileProcessor.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.FileProcessor.html",
    "title": "Class FileProcessor | |",
    "keywords": "Class FileProcessor Namespace Studio23.SS2.SaveSystem.Core public class FileProcessor : MonoBehaviour Inheritance object FileProcessor Methods Load<T>(string) public UniTask<T> Load<T>(string _saveFilePath) Parameters _saveFilePath string Returns UniTask<T> Type Parameters T Save<T>(T, string) public UniTask Save<T>(T data, string _saveFilePath) Parameters data T _saveFilePath string Returns UniTask Type Parameters T"
  },
  "api/Studio23.SS2.SaveSystem.Core.SaveSystem.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.SaveSystem.html",
    "title": "Class SaveSystem | |",
    "keywords": "Class SaveSystem Namespace Studio23.SS2.SaveSystem.Core public class SaveSystem : MonoBehaviour Inheritance object SaveSystem Fields Instance public static SaveSystem Instance Field Value SaveSystem OnLoadComplete public UnityEvent OnLoadComplete Field Value UnityEvent OnSaveComplete public UnityEvent OnSaveComplete Field Value UnityEvent Methods ClearAllSlots() Clears All Slots public UniTask ClearAllSlots() Returns UniTask ClearSelectedSlot() Clears Selected Slot public UniTask ClearSelectedSlot() Returns UniTask GetSlotMeta(int) Returns Slot metadata for the given index. If it exists locally then returns that. If it doesn't exists creates a new slot meta and returns that public UniTask<SaveSlot> GetSlotMeta(int index) Parameters index int Index starts from 0 Returns UniTask<SaveSlot> Initialize() public UniTask Initialize() Returns UniTask Load() Loads All ISavable public UniTask Load() Returns UniTask RestoreBackup() Restores Backup if available If not available locally attempts to restore from cloud if still fails then throws error Wrap in try catch and show proper UI public UniTask RestoreBackup() Returns UniTask Save(bool) By Default it saves all savable regardless of it's state If DirtyOnly is passed then it only saves Those who's state is dirty On Save All ISavable's IsDirty is set to false And attempts to save the files to cloud accordingly with the given provider public UniTask Save(bool dirtyOnly = false) Parameters dirtyOnly bool default is false Returns UniTask SelectLastSelectedSlot() Selects Last Selected Slot from PlayerPrefs. If not found selects 0 index public UniTask SelectLastSelectedSlot() Returns UniTask SelectSlot(int) Selects Save Slot public UniTask SelectSlot(int index) Parameters index int Starts from 0 Returns UniTask SyncSelectedSlotData() public UniTask SyncSelectedSlotData() Returns UniTask"
  },
  "api/Studio23.SS2.SaveSystem.Core.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Core Classes FileProcessor SaveSystem"
  },
  "api/Studio23.SS2.SaveSystem.Data.SaveSlot.html": {
    "href": "api/Studio23.SS2.SaveSystem.Data.SaveSlot.html",
    "title": "Class SaveSlot | |",
    "keywords": "Class SaveSlot Namespace Studio23.SS2.SaveSystem.Data [Serializable] public class SaveSlot Inheritance object SaveSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveSlot(int) public SaveSlot(int index) Parameters index int Fields BackupStamp public DateTime BackupStamp Field Value DateTime Description public string Description Field Value string FileKeys public Dictionary<string, int> FileKeys Field Value Dictionary<string, int> HasBackup public bool HasBackup Field Value bool Index public int Index Field Value int Thumbnail public Texture Thumbnail Field Value Texture TimeStamp public DateTime TimeStamp Field Value DateTime Properties Name public string Name { get; } Property Value string"
  },
  "api/Studio23.SS2.SaveSystem.Data.SlotConfiguration.html": {
    "href": "api/Studio23.SS2.SaveSystem.Data.SlotConfiguration.html",
    "title": "Class SlotConfiguration | |",
    "keywords": "Class SlotConfiguration Namespace Studio23.SS2.SaveSystem.Data public class SlotConfiguration : ScriptableObject Inheritance object SlotConfiguration Fields EnableBackups public bool EnableBackups Field Value bool SaveFileExtention public string SaveFileExtention Field Value string SaveRootFolderName public string SaveRootFolderName Field Value string SlotCount public int SlotCount Field Value int SlotDataBackupFileName public string SlotDataBackupFileName Field Value string SlotDatafolderName public string SlotDatafolderName Field Value string SlotMetafileName public string SlotMetafileName Field Value string Properties SavePathRoot public string SavePathRoot { get; } Property Value string"
  },
  "api/Studio23.SS2.SaveSystem.Data.html": {
    "href": "api/Studio23.SS2.SaveSystem.Data.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Data Classes SaveSlot SlotConfiguration"
  },
  "api/Studio23.SS2.SaveSystem.Editor.SaveSlotProcessorEditor.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.SaveSlotProcessorEditor.html",
    "title": "Class SaveSlotProcessorEditor | |",
    "keywords": "Class SaveSlotProcessorEditor Namespace Studio23.SS2.SaveSystem.Editor public class SaveSlotProcessorEditor : UnityEditor.Editor Inheritance object SaveSlotProcessorEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/Studio23.SS2.SaveSystem.Editor.SaveSystemEditor.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.SaveSystemEditor.html",
    "title": "Class SaveSystemEditor | |",
    "keywords": "Class SaveSystemEditor Namespace Studio23.SS2.SaveSystem.Editor public class SaveSystemEditor : UnityEditor.Editor Inheritance object SaveSystemEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/Studio23.SS2.SaveSystem.Editor.SaveSystemInstallerWindow.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.SaveSystemInstallerWindow.html",
    "title": "Class SaveSystemInstallerWindow | |",
    "keywords": "Class SaveSystemInstallerWindow Namespace Studio23.SS2.SaveSystem.Editor public class SaveSystemInstallerWindow : EditorWindow Inheritance object SaveSystemInstallerWindow"
  },
  "api/Studio23.SS2.SaveSystem.Editor.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Editor | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Editor Classes SaveSlotProcessorEditor SaveSystemEditor SaveSystemInstallerWindow"
  },
  "api/Studio23.SS2.SaveSystem.Interfaces.ISaveable.html": {
    "href": "api/Studio23.SS2.SaveSystem.Interfaces.ISaveable.html",
    "title": "Interface ISaveable | |",
    "keywords": "Interface ISaveable Namespace Studio23.SS2.SaveSystem.Interfaces public interface ISaveable Properties IsDirty Save System Would Only save files that are Dirty in short has changes to submit bool IsDirty { get; set; } Property Value bool Methods AssignSerializedData(string) Implement how your component will adjust on data load void AssignSerializedData(string data) Parameters data string String data GetSerializedData() Return a serialized string for the save system to save string GetSerializedData() Returns string String Data GetUniqueID() Must Return an Unique ID for save system to save file with this name string GetUniqueID() Returns string"
  },
  "api/Studio23.SS2.SaveSystem.Interfaces.html": {
    "href": "api/Studio23.SS2.SaveSystem.Interfaces.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Interfaces | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Interfaces Interfaces ISaveable"
  },
  "api/Studio23.SS2.SaveSystem.Utilities.ArchiverBase.html": {
    "href": "api/Studio23.SS2.SaveSystem.Utilities.ArchiverBase.html",
    "title": "Class ArchiverBase | |",
    "keywords": "Class ArchiverBase Namespace Studio23.SS2.SaveSystem.Utilities public abstract class ArchiverBase : ScriptableObject Inheritance object ArchiverBase Methods ArchiveFiles(string, string) public abstract UniTask ArchiveFiles(string archiveFilePath, string FolderToArchive) Parameters archiveFilePath string FolderToArchive string Returns UniTask ExtractFiles(string, string, bool) public abstract UniTask ExtractFiles(string archiveFilePath, string extractDirectory, bool cleanDirectory = true) Parameters archiveFilePath string extractDirectory string cleanDirectory bool Returns UniTask"
  },
  "api/Studio23.SS2.SaveSystem.Utilities.EncryptorBase.html": {
    "href": "api/Studio23.SS2.SaveSystem.Utilities.EncryptorBase.html",
    "title": "Class EncryptorBase | |",
    "keywords": "Class EncryptorBase Namespace Studio23.SS2.SaveSystem.Utilities public abstract class EncryptorBase : ScriptableObject Inheritance object EncryptorBase Methods Decrypt(string) public abstract UniTask<string> Decrypt(string cipherText) Parameters cipherText string Returns UniTask<string> Encrypt(string) public abstract UniTask<string> Encrypt(string plainText) Parameters plainText string Returns UniTask<string>"
  },
  "api/Studio23.SS2.SaveSystem.Utilities.html": {
    "href": "api/Studio23.SS2.SaveSystem.Utilities.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Utilities | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Utilities Classes ArchiverBase EncryptorBase"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | |",
    "keywords": "Changelog [v2.0.1] - 2024-01-22 Added Added Cloud Save Core Package as Dependency Added FileProcessor.cs , replacing the deleted SaveProcessor.cs. Added SaveSlotProcessor.cs. Added new samples for demonstration and their configurations. Added Archiver directory and ArchiverBase.cs, ZipUtilityArchiver.cs. Added Encryptor directory and EncryptorBase.cs, AESEncryptor.cs , and deleted Stitcher.cs. Added ItemDataBehaviour.cs and PlayerDataBehaviour.cs scripts for demo. [v2.0.0] - 2024-01-16 Updated Updated GitHub Actions workflow .github/workflows/UPMBranchUpdate.yml. Modified SaveSystemInstallerWindow.cs script. Updated SaveSystem.cs and SaveSlot.cs. Updated ISaveable.cs interface. Moved FakeData.cs from Tests/PlayMode/Data to Samples/Demo/Scripts and updated metadata. Deleted test scripts BasicSaveLoadTests.cs, EncryptionTest.cs, and SlotMetaDataTest.cs. Added Added SlotConfiguration.cs. Added FileProcessor.cs , replacing the deleted SaveProcessor.cs. Added SaveSlotProcessor.cs. Added new samples for demonstration and their configurations. Added Archiver directory and ArchiverBase.cs, ZipUtilityArchiver.cs. Added Encryptor directory and EncryptorBase.cs, AESEncryptor.cs , and deleted Stitcher.cs. Added ItemDataBehaviour.cs and PlayerDataBehaviour.cs scripts for demo. [v1.2.0] - 2023-12-14 Added Added Cloud Save Provider Cloud Save Provider Has methods to upload and download files and events to be subscribed Updated New API added: Delete Selected Slot New Test added for the new API [v1.1.8] - 2023-12-13 Updated Made two internal paths public for extention libraries [v1.1.7] - 2023-12-7 Updated Now Bundling and Unbundling is based on SharpZipLib from unity [v1.1.6] - 2023-10-26 Fixed Fixed a bug regarding enabling encryption [v1.1.5] - 2023-10-26 Updated Save Method will now check if directory exists otherwise create it. [v1.1.3] - 2023-10-26 Updated Updated How Save and Load Methods work. [v1.1.2] - 2023-10-22 Added Added a new public property called SaveBundle Path. Which can be used by extentions to manage cloud save. [v1.1.2] - 2023-10-22 Added New Method added to get save metadata to show UI. New Test Cases Added [v1.1.1] - 2023-10-22 Added Added SaveEvent delegate and corresponding events for tracking save and load operations. Added methods to handle all components implementing the ISaveable interface, bundle save files into a single file, and extract bundled save files. Updated Modified SaveSystem class to include new events and methods. Updated SaveData and LoadData methods to invoke events and return loaded data respectively. Updated bundleVersion field in the PlayerSettings structure from 1.1.0 to 1.1.1. [v1.1.0] - 2023-10-21 Added New SaveSystem Class added which will be the new entrypoint of using this library New Test Cases to ensure the library works as intented. Updated Updated how Bundling and unbundeling works. Fixed Now Bundling and unbundeling works properly Removed Bugs"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Studio-23 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "SaveSystem | |",
    "keywords": "SaveSystem Save System for Unity Save System is a framework to manage local and cloud saves. It provides simple interface to save files and configure cloud saves for Steam or Xbox and other platforms via extensions. Table of Contents Installation Getting Started Initialization Creating Save Slots Saving and Loading Data Save Data Load Data Managing Save Slots Selecting a Slot Clearing Slots Cloud Save and Restore Bundle Save Files Unbundle Save Files Installation Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/Studio-23-xyz/SaveSystem.git#upm Getting Started Initialization Create An Empty GameObject and attach the SaveSystem MonoBehaviour to it. And you are all set to use the Save System. Or You can use the Installer From Top tool bar Studio-23/Save System/ Installer Creating Save Slots Save slots are used to organize saved game data. You can create and manage save slots as follows: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void Start() { // Create save slots await SaveSystem.Instance.CreateSlotsAsync(); } } Saving and Loading Data Saving Data To save data using the SaveSystem library, you can use the SaveData method. Here's how to use it: // Example code for saving data YourDataType yourData = // Your data here; string saveFileName = \"example_data\"; // Choose a unique name for your data string savefilePath = \"Your/Save/Path\"; // Choose a save directory path string extention = \".dat\"; // Choose a file extension for your data await SaveSystem.Instance.SaveData(yourData, saveFileName, savefilePath, extention); yourData: Replace this with the data you want to save. saveFileName: Choose a unique name for your saved data. savefilePath: Specify the directory path where you want to save the data. extention: Choose a file extension for your data. Loading Data To load data using the SaveSystem library, you can use the LoadData method. Here's how to use it: // Example code for loading data string saveFileName = \"example_data\"; // The same name used when saving string savefilePath = \"Your/Save/Path\"; // The directory where the data was saved string extention = \".dat\"; // The file extension used for the saved data YourDataType loadedData = await SaveSystem.Instance.LoadData<YourDataType>(saveFileName, savefilePath, extention); saveFileName: Use the same name that was used when saving the data. savefilePath: Specify the directory path where the data was saved. extention: Use the same file extension that was used for saving the data. YourDataType: Replace with the actual data type you're expecting to load. These methods allow you to save and load custom data types using the SaveSystem library. Managing Save Slots Selecting a Slot You can switch between save slots by using the SelectSlot method: using Studio23.SS2.SaveSystem.Core; public class YourGameManager : MonoBehaviour { private void SwitchSaveSlot(int slotIndex) { SaveSystem.Instance.SelectSlot(slotIndex); } } Clearing Slots To clear all save slots, you can use the ClearSlotsAsync method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void ClearAllSlots() { // Clear all save slots await SaveSystem.Instance.ClearSlotsAsync(); } } Cloud Save and Restore Bundle Save Files You can bundle save files for cloud storage with the BundleSaveFiles method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void BundleSaveFilesForCloud() { // Bundle save files for cloud storage await SaveSystem.Instance.BundleSaveFiles(); } } Unbundle Save Files To restore save files from cloud storage, use the UnBundleSaveFiles method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void RestoreSaveFilesFromCloud() { // Restore save files from cloud storage await SaveSystem.Instance.UnBundleSaveFiles(); } } That's it! You now have the basic information you need to use the SaveSystem library in your Unity project. Explore the library's features and customize it according to your game's needs."
  }
}