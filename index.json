{
  "api/Global.BasicSaveLoadTests.html": {
    "href": "api/Global.BasicSaveLoadTests.html",
    "title": "Class BasicSaveLoadTests | |",
    "keywords": "Class BasicSaveLoadTests Namespace Global public class BasicSaveLoadTests Inheritance object BasicSaveLoadTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Bundle_Create_Test() public IEnumerator Bundle_Create_Test() Returns IEnumerator Bundle_Extrat_Test() public IEnumerator Bundle_Extrat_Test() Returns IEnumerator SaveSystem_Setup() public IEnumerator SaveSystem_Setup() Returns IEnumerator Save_Load_Test() public IEnumerator Save_Load_Test() Returns IEnumerator"
  },
  "api/Global.EncryptionTest.html": {
    "href": "api/Global.EncryptionTest.html",
    "title": "Class EncryptionTest | |",
    "keywords": "Class EncryptionTest Namespace Global public class EncryptionTest Inheritance object EncryptionTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Load_Test() public IEnumerator Load_Test() Returns IEnumerator SaveSystem_Setup() public IEnumerator SaveSystem_Setup() Returns IEnumerator Save_Test() public IEnumerator Save_Test() Returns IEnumerator"
  },
  "api/Global.ItemData.html": {
    "href": "api/Global.ItemData.html",
    "title": "Class ItemData | |",
    "keywords": "Class ItemData Namespace Global public class ItemData Inheritance object ItemData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields itemName public string itemName Field Value string itemQuantity public int itemQuantity Field Value int"
  },
  "api/Global.PlayerData.html": {
    "href": "api/Global.PlayerData.html",
    "title": "Class PlayerData | |",
    "keywords": "Class PlayerData Namespace Global public class PlayerData Inheritance object PlayerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields playerLevel public int playerLevel Field Value int playerName public string playerName Field Value string"
  },
  "api/Global.SlotMetaDataTest.html": {
    "href": "api/Global.SlotMetaDataTest.html",
    "title": "Class SlotMetaDataTest | |",
    "keywords": "Class SlotMetaDataTest Namespace Global public class SlotMetaDataTest Inheritance object SlotMetaDataTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SaveSystem_LoadSlot() public IEnumerator SaveSystem_LoadSlot() Returns IEnumerator SaveSystem_SaveSlots() public IEnumerator SaveSystem_SaveSlots() Returns IEnumerator SaveSystem_Setup() public IEnumerator SaveSystem_Setup() Returns IEnumerator"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Classes BasicSaveLoadTests EncryptionTest ItemData PlayerData SlotMetaDataTest"
  },
  "api/Studio23.SS2.SaveSystem.Core.SaveEvent.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.SaveEvent.html",
    "title": "Delegate SaveEvent | |",
    "keywords": "Delegate SaveEvent Namespace Studio23.SS2.SaveSystem.Core public delegate void SaveEvent()"
  },
  "api/Studio23.SS2.SaveSystem.Core.SaveSystem.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.SaveSystem.html",
    "title": "Class SaveSystem | |",
    "keywords": "Class SaveSystem Namespace Studio23.SS2.SaveSystem.Core public class SaveSystem : MonoBehaviour Inheritance object SaveSystem Fields Instance public static SaveSystem Instance Field Value SaveSystem OnBundleComplete public SaveEvent OnBundleComplete Field Value SaveEvent OnLoadComplete public SaveEvent OnLoadComplete Field Value SaveEvent OnSaveComplete public SaveEvent OnSaveComplete Field Value SaveEvent OnUnbundleComplete public SaveEvent OnUnbundleComplete Field Value SaveEvent Methods BundleSaveFiles(string) Serializes all the files into one file for cloud save providers to work with public UniTask BundleSaveFiles(string bundleName = \"cloudSave\") Parameters bundleName string Name of your file(Optional) Returns UniTask UniTask ClearSlotsAsync() Delete all saved files public UniTask ClearSlotsAsync() Returns UniTask UniTask GetSaveSlotMetaData() public UniTask<List<SaveSlot>> GetSaveSlotMetaData() Returns UniTask<List<SaveSlot>> LoadAllSavable() Finds all Components that implements ISavable interface and loads data if it was saved before. You should implement a progress feedback as it will take some time. public UniTask LoadAllSavable() Returns UniTask LoadData<T>(string, string, string, bool, string, string) Use this method to load external files that was saved by the save method public UniTask<T> LoadData<T>(string saveFileName, string savefilePath, string extention, bool enableEncryption = false, string encryptionKey = \"1234567812345678\", string encryptionIV = \"8765432156785432\") Parameters saveFileName string Name of the file.Make sure you used the same key when saving savefilePath string Folder path, Make sure this was used when saving extention string Extention parameter for filtering enableEncryption bool Optional Encryption Enable encryptionKey string Optional 16 byte key encryptionIV string Optional 16 byte key Returns UniTask<T> Unitask Use this to impliment progress Type Parameters T SaveAllSavable() Finds all Components that implements ISavable interface and saves them. You should implement a progress feedback as it will take some time. public UniTask SaveAllSavable() Returns UniTask UniTask SaveData<T>(T, string, string, string, bool, string, string) Use this method to save files from other systems. Essentially create new folders as you see fit public UniTask SaveData<T>(T data, string saveFileName, string savefilePath, string extention, bool enableEncryption = false, string encryptionKey = \"1234567812345678\", string encryptionIV = \"8765432156785432\") Parameters data T Data of any type. It will automatically be parsed to JSON saveFileName string Name of the file. It should be unique savefilePath string Path of the directory where the file should be saved extention string Give your file an extetion for filter enableEncryption bool Optional Encryption Enable encryptionKey string Optional 16 byte key encryptionIV string Optional 16 byte key Returns UniTask Unitask Use this to impliment progress Type Parameters T SelectSlot(int) public void SelectSlot(int index) Parameters index int UnBundleSaveFiles(string) Extracts the bundled file into it's original state. public UniTask UnBundleSaveFiles(string bundleName = \"cloudSave\") Parameters bundleName string Name of your file(Optional) Returns UniTask UniTask UpdateSelectedSlotMetadata(string) You can update selected slot metadata description from here. public UniTask UpdateSelectedSlotMetadata(string description = \"\") Parameters description string Optional Parameter Returns UniTask"
  },
  "api/Studio23.SS2.SaveSystem.Core.html": {
    "href": "api/Studio23.SS2.SaveSystem.Core.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Core Classes SaveSystem Delegates SaveEvent"
  },
  "api/Studio23.SS2.SaveSystem.Data.SaveSlot.html": {
    "href": "api/Studio23.SS2.SaveSystem.Data.SaveSlot.html",
    "title": "Class SaveSlot | |",
    "keywords": "Class SaveSlot Namespace Studio23.SS2.SaveSystem.Data public class SaveSlot Inheritance object SaveSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveSlot(string) public SaveSlot(string name) Parameters name string Fields Description public string Description Field Value string Id public int Id Field Value int Name public string Name Field Value string TimeStamp public DateTime TimeStamp Field Value DateTime"
  },
  "api/Studio23.SS2.SaveSystem.Data.html": {
    "href": "api/Studio23.SS2.SaveSystem.Data.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Data Classes SaveSlot"
  },
  "api/Studio23.SS2.SaveSystem.Editor.SaveSystemInstallerWindow.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.SaveSystemInstallerWindow.html",
    "title": "Class SaveSystemInstallerWindow | |",
    "keywords": "Class SaveSystemInstallerWindow Namespace Studio23.SS2.SaveSystem.Editor public class SaveSystemInstallerWindow : EditorWindow Inheritance object SaveSystemInstallerWindow Methods ShowWindow() public static void ShowWindow()"
  },
  "api/Studio23.SS2.SaveSystem.Editor.html": {
    "href": "api/Studio23.SS2.SaveSystem.Editor.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Editor | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Editor Classes SaveSystemInstallerWindow"
  },
  "api/Studio23.SS2.SaveSystem.Interfaces.ISaveable.html": {
    "href": "api/Studio23.SS2.SaveSystem.Interfaces.ISaveable.html",
    "title": "Interface ISaveable | |",
    "keywords": "Interface ISaveable Namespace Studio23.SS2.SaveSystem.Interfaces public interface ISaveable Properties UniqueID Must Return an Unique ID for save system to save file with this name string UniqueID { get; } Property Value string Methods AssignSerializedData(string) Implement how your component will adjust on data load void AssignSerializedData(string data) Parameters data string String data GetSerializedData() Return a serialized string for the save system to save string GetSerializedData() Returns string String Data"
  },
  "api/Studio23.SS2.SaveSystem.Interfaces.html": {
    "href": "api/Studio23.SS2.SaveSystem.Interfaces.html",
    "title": "Namespace Studio23.SS2.SaveSystem.Interfaces | |",
    "keywords": "Namespace Studio23.SS2.SaveSystem.Interfaces Interfaces ISaveable"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | |",
    "keywords": "Changelog [v1.1.3] - 2023-10-26 Updated Updated How Save and Load Methods work. [v1.1.2] - 2023-10-22 Added New Method added to get save metadata to show UI. New Test Cases Added [v1.1.2] - 2023-10-22 Added Added a new public property called SaveBundle Path. Which can be used by extentions to manage cloud save. [v1.1.2] - 2023-10-22 Added New Method added to get save metadata to show UI. New Test Cases Added [v1.1.1] - 2023-10-22 Added Added SaveEvent delegate and corresponding events for tracking save and load operations. Added methods to handle all components implementing the ISaveable interface, bundle save files into a single file, and extract bundled save files. Updated Modified SaveSystem class to include new events and methods. Updated SaveData and LoadData methods to invoke events and return loaded data respectively. Updated bundleVersion field in the PlayerSettings structure from 1.1.0 to 1.1.1. [v1.1.0] - 2023-10-21 Added New SaveSystem Class added which will be the new entrypoint of using this library New Test Cases to ensure the library works as intented. Updated Updated how Bundling and unbundeling works. Fixed Now Bundling and unbundeling works properly Removed Bugs"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Studio-23 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "SaveSystem | |",
    "keywords": "SaveSystem Save System for Unity Save System is a framework to manage local and cloud saves. It provides simple interface to save files and configure cloud saves for Steam or Xbox and other platforms via extensions. Table of Contents Installation Getting Started Initialization Creating Save Slots Saving and Loading Data Save Data Load Data Managing Save Slots Selecting a Slot Clearing Slots Cloud Save and Restore Bundle Save Files Unbundle Save Files Installation Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/Studio-23-xyz/SaveSystem.git#upm Getting Started Initialization Create An Empty GameObject and attach the SaveSystem MonoBehaviour to it. And you are all set to use the Save System. Or You can use the Installer From Top tool bar Studio-23/Save System/ Installer Creating Save Slots Save slots are used to organize saved game data. You can create and manage save slots as follows: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void Start() { // Create save slots await SaveSystem.Instance.CreateSlotsAsync(); } } Saving and Loading Data Saving Data To save data using the SaveSystem library, you can use the SaveData method. Here's how to use it: // Example code for saving data YourDataType yourData = // Your data here; string saveFileName = \"example_data\"; // Choose a unique name for your data string savefilePath = \"Your/Save/Path\"; // Choose a save directory path string extention = \".dat\"; // Choose a file extension for your data await SaveSystem.Instance.SaveData(yourData, saveFileName, savefilePath, extention); yourData: Replace this with the data you want to save. saveFileName: Choose a unique name for your saved data. savefilePath: Specify the directory path where you want to save the data. extention: Choose a file extension for your data. Loading Data To load data using the SaveSystem library, you can use the LoadData method. Here's how to use it: // Example code for loading data string saveFileName = \"example_data\"; // The same name used when saving string savefilePath = \"Your/Save/Path\"; // The directory where the data was saved string extention = \".dat\"; // The file extension used for the saved data YourDataType loadedData = await SaveSystem.Instance.LoadData<YourDataType>(saveFileName, savefilePath, extention); saveFileName: Use the same name that was used when saving the data. savefilePath: Specify the directory path where the data was saved. extention: Use the same file extension that was used for saving the data. YourDataType: Replace with the actual data type you're expecting to load. These methods allow you to save and load custom data types using the SaveSystem library. Managing Save Slots Selecting a Slot You can switch between save slots by using the SelectSlot method: using Studio23.SS2.SaveSystem.Core; public class YourGameManager : MonoBehaviour { private void SwitchSaveSlot(int slotIndex) { SaveSystem.Instance.SelectSlot(slotIndex); } } Clearing Slots To clear all save slots, you can use the ClearSlotsAsync method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void ClearAllSlots() { // Clear all save slots await SaveSystem.Instance.ClearSlotsAsync(); } } Cloud Save and Restore Bundle Save Files You can bundle save files for cloud storage with the BundleSaveFiles method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void BundleSaveFilesForCloud() { // Bundle save files for cloud storage await SaveSystem.Instance.BundleSaveFiles(); } } Unbundle Save Files To restore save files from cloud storage, use the UnBundleSaveFiles method: using Studio23.SS2.SaveSystem.Core; using Cysharp.Threading.Tasks; public class YourGameManager : MonoBehaviour { private async void RestoreSaveFilesFromCloud() { // Restore save files from cloud storage await SaveSystem.Instance.UnBundleSaveFiles(); } } That's it! You now have the basic information you need to use the SaveSystem library in your Unity project. Explore the library's features and customize it according to your game's needs."
  }
}